###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         07/Apr/2021  19:53:10 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\end\Projects\zstack\Samples\GenericApp\Source\G #
#                          enericApp.c                                        #
#    Command line       =  -f F:\end\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg           #
#                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f    #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg             #
#                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\end\Projects\zstack\Samples\GenericApp\Source\G #
#                          enericApp.c -D HAL_UART=TRUE -D NWK_AUTO_POLL -D   #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             #
#                          xPOWER_SAVING -lC F:\end\Projects\zstack\Samples\G #
#                          enericApp\CC2530DB\EndDeviceEB\List\ -lA           #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \EndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o  #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \EndDeviceEB\Obj\ -e --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I F:\end\Projects\zstack\Sam #
#                          ples\GenericApp\CC2530DB\ -I                       #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\SOURCE\ -I F:\end\Projects\zstack\Samples\Gene #
#                          ricApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I        #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MT\ -I                  #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I         #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\    #
#                          -I F:\end\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I   #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I            #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I           #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I          #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I           #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I                #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I      #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I         #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      #
#                          F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\    #
#                          -I F:\end\Projects\zstack\Samples\GenericApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ #
#                          SINGLE_CHIP\ -Ohz --require_prototypes             #
#    List file          =  F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \EndDeviceEB\List\GenericApp.lst                   #
#    Object file        =  F:\end\Projects\zstack\Samples\GenericApp\CC2530DB #
#                          \EndDeviceEB\Obj\GenericApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\end\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /**************************************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 15 seconds.  The application will also
     46            receive "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          
     82          #include "MT_UART.h"
     83          
     84          #include <string.h>
     85          #include <stdio.h>
     86          #include <math.h>
     87          
     88          /*********************************************************************
     89           * MACROS
     90           */
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */
    103          
    104          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    105          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    106          {
    107            GENERICAPP_CLUSTERID
    108          };
    109          

   \                                 In  segment XDATA_ROM_C, align 1
    110          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    111          {
    112            GENERICAPP_ENDPOINT,              //  int Endpoint;
    113            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    114            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    115            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    116            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    117            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    118            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    119            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    120            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    121          };
    122          
    123          // This is the Endpoint/Interface description.  It is defined here, but
    124          // filled-in in GenericApp_Init().  Another way to go would be to fill
    125          // in the structure here and make it a "const" (in code space).  The
    126          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          /*********************************************************************
    134           * EXTERNAL FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * LOCAL VARIABLES
    139           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141                                    // This variable will be received when
    142                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_ROM_C, align 1
    150          const int ENDID = 2;
   \                     ENDID:
   \   000000   0200         DW 2
    151          /*
    152           * ±£´æ´®¿Ú»Øµ÷Êý¾Ý 
    153           */
    154          extern unsigned char uartbuf[7];
    155          extern int flag;
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          int index = 0;
   \                     index:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          int task = 0;
   \                     task:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          bool jump = true;
   \                     jump:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for jump>`
   \   000001                REQUIRE __INIT_XDATA_I
    160          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    161          unsigned char Read[3][8] = {{0x01, 0x03, 0x00, 0x12, 0x00, 0x01, 0x24, 0x0F},
   \                     `Read`:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for Read>`
   \   000018                REQUIRE __INIT_XDATA_I
    162                                      {0x01, 0x03, 0x00, 0x13, 0x00, 0x01, 0x75, 0xCF},
    163                                      {0x01, 0x03, 0x00, 0x15, 0x00, 0x01, 0x95, 0xCE}};
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          int humidity;
   \                     humidity:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          int temp;
   \                     temp:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          int ec;
   \                     ec:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    168          
    169          /*********************************************************************
    170           * LOCAL FUNCTIONS
    171           */
    172          void GenericApp_SendTheMessage( void );
    173          
    174          int binHexOct(char data[]); // ½øÖÆ×ª»»
    175          
    176          /*********************************************************************
    177           * NETWORK LAYER CALLBACKS
    178           */
    179          
    180          /*********************************************************************
    181           * PUBLIC FUNCTIONS
    182           */
    183          
    184          /*********************************************************************
    185           * @fn      GenericApp_Init
    186           *
    187           * @brief   Initialization function for the Generic App Task.
    188           *          This is called during initialization and should contain
    189           *          any application specific initialization (ie. hardware
    190           *          initialization/setup, table initialization, power up
    191           *          notificaiton ... ).
    192           *
    193           * @param   task_id - the ID assigned by OSAL.  This ID should be
    194           *                    used to send messages and set timers.
    195           *
    196           * @return  none
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
    199          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    200            GenericApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    201            GenericApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    202            GenericApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#GenericApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    203            
    204            // ´®¿Ú³õÊ¼»¯
    205            MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    206            MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    207          
    208            // Device hardware initialization can be added here or in main() (Zmain.c).
    209            // If the hardware is application specific - add it here.
    210            // If the hardware is other parts of the device add it in main().
    211          
    212            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast; // ¹ã²¥
   \   00001E   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000021   740F         MOV     A,#0xf
   \   000023   F0           MOVX    @DPTR,A
    213            GenericApp_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000024   A3           INC     DPTR
   \   000025   740A         MOV     A,#0xa
   \   000027   F0           MOVX    @DPTR,A
    214            GenericApp_DstAddr.addr.shortAddr = 0xFFFC; // ·¢ËÍ¸øÐ­µ÷Æ÷
   \   000028   90....       MOV     DPTR,#GenericApp_DstAddr
   \   00002B   74FC         MOV     A,#-0x4
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74FF         MOV     A,#-0x1
   \   000031   F0           MOVX    @DPTR,A
    215          
    216            // Fill out the endpoint description.
    217            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000032   90....       MOV     DPTR,#GenericApp_epDesc
   \   000035   740A         MOV     A,#0xa
   \   000037   F0           MOVX    @DPTR,A
    218            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   00003F   F0           MOVX    @DPTR,A
    219            GenericApp_epDesc.simpleDesc
    220                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000040   A3           INC     DPTR
   \   000041   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   000047   F0           MOVX    @DPTR,A
    221            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
    222          
    223            // Register the endpoint description with the AF
    224            afRegister( &GenericApp_epDesc );
   \   00004B                ; Setup parameters for call to function afRegister
   \   00004B   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   00004D   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   00004F   12....       LCALL   ??afRegister?relay
    225          
    226            // Register for all key events - This app will handle all key events
    227            RegisterForKeys( GenericApp_TaskID );
   \   000052                ; Setup parameters for call to function RegisterForKeys
   \   000052   90....       MOV     DPTR,#GenericApp_TaskID
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   ??RegisterForKeys?relay
    228          
    229            // Update the display
    230          #if defined ( LCD_SUPPORTED )
    231              HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00005A                ; Setup parameters for call to function HalLcdWriteString
   \   00005A   7901         MOV     R1,#0x1
   \   00005C   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   00005E   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000060   12....       LCALL   ??HalLcdWriteString?relay
    232          #endif
    233              
    234            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000063                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000063   7A20         MOV     R2,#0x20
   \   000065   7B80         MOV     R3,#-0x80
   \   000067   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    235            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   00006F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00006F   7A06         MOV     R2,#0x6
   \   000071   7B80         MOV     R3,#-0x80
   \   000073   90....       MOV     DPTR,#GenericApp_TaskID
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    236          }
   \   00007B   7F01         MOV     R7,#0x1
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238          /*********************************************************************
    239           * @fn      GenericApp_ProcessEvent
    240           *
    241           * @brief   Generic Application Task event processor.  This function
    242           *          is called to process all events for the task.  Events
    243           *          include timers, messages and any other user defined events.
    244           *
    245           * @param   task_id  - The OSAL assigned task ID.
    246           * @param   events - events to process.  This is a bit map and can
    247           *                   contain more than one event.
    248           *
    249           * @return  none
    250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
    252          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    253            afIncomingMSGPacket_t *MSGpkt;
    254          
    255            (void)task_id;  // Intentionally unreferenced parameter
    256          
    257            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6052         JZ      ??GenericApp_ProcessEvent_0
    258            {
    259              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8036         SJMP    ??GenericApp_ProcessEvent_1
    260              while ( MSGpkt )
    261              {
    262                switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_2:
   \   00000F   85..82       MOV     DPL,?V0 + 0
   \   000012   85..83       MOV     DPH,?V0 + 1
   \   000015   E0           MOVX    A,@DPTR
   \   000016   64D1         XRL     A,#0xd1
   \   000018   7024         JNZ     ??GenericApp_ProcessEvent_3
    263                {
    264                  case ZDO_STATE_CHANGE:
    265                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001F   F0           MOVX    @DPTR,A
    266                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    267                        || (GenericApp_NwkState == DEV_ROUTER)
    268                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   000020   6409         XRL     A,#0x9
   \   000022   600A         JZ      ??GenericApp_ProcessEvent_4
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6407         XRL     A,#0x7
   \   000027   6005         JZ      ??GenericApp_ProcessEvent_4
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6406         XRL     A,#0x6
   \   00002C   7010         JNZ     ??GenericApp_ProcessEvent_3
    269                    {
    270                      // Start sending "the" message in a regular interval.
    271                      osal_start_timerEx( GenericApp_TaskID,
    272                                          GENERICAPP_SEND_MSG_EVT,
    273                                        GENERICAPP_SEND_MSG_TIMEOUT );
   \                     ??GenericApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_start_timerEx
   \   00002E   7CB8         MOV     R4,#-0x48
   \   000030   7D0B         MOV     R5,#0xb
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7B00         MOV     R3,#0x0
   \   000036   90....       MOV     DPTR,#GenericApp_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   ??osal_start_timerEx?relay
    274                    }
    275                    break;
    276          
    277                  default:
    278                    break;
    279                }
    280          
    281                // Release the memory
    282                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   00003E                ; Setup parameters for call to function osal_msg_deallocate
   \   00003E   AA..         MOV     R2,?V0 + 0
   \   000040   AB..         MOV     R3,?V0 + 1
   \   000042   12....       LCALL   ??osal_msg_deallocate?relay
    283          
    284                // Next
    285                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000045                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000045   90....       MOV     DPTR,#GenericApp_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??osal_msg_receive?relay
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
    286              }
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   45..         ORL     A,?V0 + 1
   \   000055   70B8         JNZ     ??GenericApp_ProcessEvent_2
    287          
    288              // return unprocessed events
    289              return (events ^ SYS_EVENT_MSG);
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   6480         XRL     A,#0x80
   \                     ??GenericApp_ProcessEvent_5:
   \   00005C   FB           MOV     R3,A
   \   00005D   8023         SJMP    ??GenericApp_ProcessEvent_6
    290            }
    291          
    292            // Send a message out - This event is generated by a timer
    293            //  (setup in GenericApp_Init()).
    294            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   00005F   EE           MOV     A,R6
   \   000060   A2E0         MOV     C,0xE0 /* A   */.0
   \   000062   501A         JNC     ??GenericApp_ProcessEvent_7
    295            {
    296              // Send "the" message
    297              GenericApp_SendTheMessage();
   \   000064                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000064   12....       LCALL   ??GenericApp_SendTheMessage?relay
    298          
    299              // Setup to send message again
    300              osal_start_timerEx( GenericApp_TaskID,
    301                                  GENERICAPP_SEND_MSG_EVT,
    302                                GENERICAPP_SEND_MSG_TIMEOUT );
   \   000067                ; Setup parameters for call to function osal_start_timerEx
   \   000067   7CB8         MOV     R4,#-0x48
   \   000069   7D0B         MOV     R5,#0xb
   \   00006B   7A01         MOV     R2,#0x1
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   90....       MOV     DPTR,#GenericApp_TaskID
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   ??osal_start_timerEx?relay
    303              
    304              // return unprocessed events
    305              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000077   EE           MOV     A,R6
   \   000078   6401         XRL     A,#0x1
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   80DE         SJMP    ??GenericApp_ProcessEvent_5
    306            }
    307          
    308            // Discard unknown events
    309            return 0;
   \                     ??GenericApp_ProcessEvent_7:
   \   00007E   7A00         MOV     R2,#0x0
   \   000080   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_6:
   \   000082   7F04         MOV     R7,#0x4
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
    310          }
    311          
    312          /*********************************************************************
    313           * @fn      GenericApp_SendTheMessage
    314           *
    315           * @brief   Send "the" message.
    316           *
    317           * @param   none
    318           *
    319           * @return  none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    322          { 
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    323            HalUARTWrite(0, Read[index], 8);  
   \   00000A                ; Setup parameters for call to function HalUARTWrite
   \   00000A   7C08         MOV     R4,#0x8
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   90....       MOV     DPTR,#index
   \   000011   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000014   7403         MOV     A,#0x3
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?S_SHL
   \   00001B   74..         MOV     A,#`Read` & 0xff
   \   00001D   25..         ADD     A,?V0 + 0
   \   00001F   FA           MOV     R2,A
   \   000020   74..         MOV     A,#(`Read` >> 8) & 0xff
   \   000022   35..         ADDC    A,?V0 + 1
   \   000024   FB           MOV     R3,A
   \   000025   7900         MOV     R1,#0x0
   \   000027   12....       LCALL   ??HalUARTWrite?relay
    324            
    325            if(flag != 1){
   \   00002A   90....       MOV     DPTR,#flag
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6401         XRL     A,#0x1
   \   000030   7002         JNZ     ??GenericApp_SendTheMessage_0
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \                     ??GenericApp_SendTheMessage_0:
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??GenericApp_SendTheMessage_1 & 0xFFFF
    326              if(!jump){
   \   000039   90....       MOV     DPTR,#jump
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6003         JZ      $+5
   \   00003F   02....       LJMP    ??GenericApp_SendTheMessage_2 & 0xFFFF
    327                char message[32];
    328                task++;
   \   000042   90....       MOV     DPTR,#task
   \   000045   12....       LCALL   ?Subroutine2 & 0xFFFF
    329                switch(task) {
   \                     ??CrossCallReturnLabel_6:
   \   000048   90....       MOV     DPTR,#task
   \   00004B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for GenericApp_SendTheMessage>_0`:
   \   000053   0100         DW        1
   \   000055   02           DB        2
   \   000056   ....         DW        ??GenericApp_SendTheMessage_3
   \   000058   ....         DW        ??GenericApp_SendTheMessage_4
   \   00005A   ....         DW        ??GenericApp_SendTheMessage_5
   \   00005C   ....         DW        ??GenericApp_SendTheMessage_6
    330                  case 1:
    331                    humidity = binHexOct(uartbuf);
                                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??GenericApp_SendTheMessage_4:
   \   00005E                ; Setup parameters for call to function binHexOct
   \   00005E   7A..         MOV     R2,#uartbuf & 0xff
   \   000060   7B..         MOV     R3,#(uartbuf >> 8) & 0xff
   \   000062   12....       LCALL   ??binHexOct?relay
   \   000065   90....       MOV     DPTR,#humidity
   \                     ??GenericApp_SendTheMessage_7:
   \   000068   EA           MOV     A,R2
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   EB           MOV     A,R3
   \   00006C   F0           MOVX    @DPTR,A
    332                    break;
    333                  case 2:
    334                    temp = binHexOct(uartbuf);
                                            ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    335                    break;
    336                  case 3:
    337                    ec = binHexOct(uartbuf);
                                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    338                    unsigned int addr16 = NLME_GetShortAddr();
    339                    // sprintf(message, "%d,%d,%.1f,%.1f,%d" , ENDID, addr16, humidity/10.0, temp/10.0, ec);
    340                    sprintf(message, "%d:%d,%.1f,%.1f,%d" , ENDID, addr16, humidity/10.0, temp/10.0, ec);
    341                    task = 0;
    342                    break;
    343                }  
    344                if (task == 0 && AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    345                                     GENERICAPP_CLUSTERID,
    346                                     (byte)osal_strlen(message) + 1,
    347                                     (byte *)&message,
    348                                     &GenericApp_TransID,
    349                                     AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??GenericApp_SendTheMessage_3:
   \   00006D   90....       MOV     DPTR,#task
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   E8           MOV     A,R0
   \   000076   49           ORL     A,R1
   \   000077   705B         JNZ     ??GenericApp_SendTheMessage_2
   \                     ??GenericApp_SendTheMessage_8:
   \   000079                ; Setup parameters for call to function AF_DataRequest
   \   000079   75..1E       MOV     ?V0 + 0,#0x1e
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000084   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   000087   78..         MOV     R0,#?V0 + 0
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   8582..       MOV     ?V0 + 0,DPL
   \   000094   8583..       MOV     ?V0 + 1,DPH
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C                ; Setup parameters for call to function osal_strlen
   \   00009C   7405         MOV     A,#0x5
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   AA82         MOV     R2,DPL
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   12....       LCALL   ??osal_strlen?relay
   \   0000A8   EA           MOV     A,R2
   \   0000A9   2401         ADD     A,#0x1
   \   0000AB   F5..         MOV     ?V0 + 0,A
   \   0000AD   E4           CLR     A
   \   0000AE   3400         ADDC    A,#0x0
   \   0000B0   F5..         MOV     ?V0 + 1,A
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   75..01       MOV     ?V0 + 0,#0x1
   \   0000BA   75..00       MOV     ?V0 + 1,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7920         MOV     R1,#0x20
   \   0000C4   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   0000C6   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   0000C8   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   0000CA   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   0000CC   12....       LCALL   ??AF_DataRequest?relay
   \   0000CF   7409         MOV     A,#0x9
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
    350                {
    351                  // Successfully requested to be sent.
    352                }
    353                else
    354                {
    355                  // Error occurred in request to send.
    356                }
    357              }
    358              flag = 1;
   \                     ??GenericApp_SendTheMessage_2:
   \   0000D4   90....       MOV     DPTR,#flag
   \   0000D7   7401         MOV     A,#0x1
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E4           CLR     A
   \   0000DC   F0           MOVX    @DPTR,A
    359              index++;
   \   0000DD   90....       MOV     DPTR,#index
   \   0000E0   12....       LCALL   ?Subroutine2 & 0xFFFF
    360              if(index >= 3){
   \                     ??CrossCallReturnLabel_7:
   \   0000E3   90....       MOV     DPTR,#index
   \   0000E6   C3           CLR     C
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   9403         SUBB    A,#0x3
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000EF   4007         JC      ??GenericApp_SendTheMessage_9
    361                index = 0;
   \   0000F1   90....       MOV     DPTR,#index
   \   0000F4   E4           CLR     A
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   F0           MOVX    @DPTR,A
    362              }
    363              jump = false;
   \                     ??GenericApp_SendTheMessage_9:
   \   0000F8   90....       MOV     DPTR,#jump
   \   0000FB   E4           CLR     A
   \   0000FC   F0           MOVX    @DPTR,A
    364            }
    365          }
   \                     ??GenericApp_SendTheMessage_1:
   \   0000FD   7420         MOV     A,#0x20
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   7F0C         MOV     R7,#0xc
   \   000104   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??GenericApp_SendTheMessage_5:
   \   000107                ; Setup parameters for call to function binHexOct
   \   000107   7A..         MOV     R2,#uartbuf & 0xff
   \   000109   7B..         MOV     R3,#(uartbuf >> 8) & 0xff
   \   00010B   12....       LCALL   ??binHexOct?relay
   \   00010E   90....       MOV     DPTR,#temp
   \   000111   02....       LJMP    ??GenericApp_SendTheMessage_7 & 0xFFFF
   \                     ??GenericApp_SendTheMessage_6:
   \   000114                ; Setup parameters for call to function binHexOct
   \   000114   7A..         MOV     R2,#uartbuf & 0xff
   \   000116   7B..         MOV     R3,#(uartbuf >> 8) & 0xff
   \   000118   12....       LCALL   ??binHexOct?relay
   \   00011B   90....       MOV     DPTR,#ec
   \   00011E   EA           MOV     A,R2
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   EB           MOV     A,R3
   \   000122   F0           MOVX    @DPTR,A
   \   000123                ; Setup parameters for call to function NLME_GetShortAddr
   \   000123   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000126   8A..         MOV     ?V0 + 4,R2
   \   000128   8B..         MOV     ?V0 + 5,R3
   \   00012A                ; Setup parameters for call to function sprintf
   \   00012A   90....       MOV     DPTR,#ec
   \   00012D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000130   90....       MOV     DPTR,#temp
   \   000133   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000136   12....       LCALL   ?L_TO_FLT
   \   000139   90....       MOV     DPTR,#__Constant_41200000
   \   00013C   78..         MOV     R0,#?V0 + 8
   \   00013E   12....       LCALL   ?L_MOV_X
   \   000141   78..         MOV     R0,#?V0 + 0
   \   000143   79..         MOV     R1,#?V0 + 8
   \   000145   12....       LCALL   ?FLT_DIV
   \   000148   78..         MOV     R0,#?V0 + 0
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00014D   90....       MOV     DPTR,#humidity
   \   000150   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000153   12....       LCALL   ?L_TO_FLT
   \   000156   90....       MOV     DPTR,#__Constant_41200000
   \   000159   78..         MOV     R0,#?V0 + 8
   \   00015B   12....       LCALL   ?L_MOV_X
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   79..         MOV     R1,#?V0 + 8
   \   000162   12....       LCALL   ?FLT_DIV
   \   000165   78..         MOV     R0,#?V0 + 0
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00016A   78..         MOV     R0,#?V0 + 4
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..02       MOV     ?V0 + 0,#0x2
   \   000172   75..00       MOV     ?V0 + 1,#0x0
   \   000175   78..         MOV     R0,#?V0 + 0
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017A   7C..         MOV     R4,#`?<Constant "%d:%d,%.1f,%.1f,%d">` & 0xff
   \   00017C   7D..         MOV     R5,#(`?<Constant "%d:%d,%.1f,%.1f,%d">` >> 8) & 0xff
   \   00017E   740E         MOV     A,#0xe
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   AA82         MOV     R2,DPL
   \   000185   AB83         MOV     R3,DPH
   \   000187   12....       LCALL   ??sprintf?relay
   \   00018A   740E         MOV     A,#0xe
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   90....       MOV     DPTR,#task
   \   000192   E4           CLR     A
   \   000193   F0           MOVX    @DPTR,A
   \   000194   A3           INC     DPTR
   \   000195   F0           MOVX    @DPTR,A
   \   000196   02....       LJMP    ??GenericApp_SendTheMessage_8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   33           RLC     A
   \   000004   95E0         SUBB    A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V0 + 2,A
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
    366          
    367          /*********************************************************************
    368           * ½øÖÆ×ª»»
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          int binHexOct(char data[]){
   \                     binHexOct:
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    371            int result[16];
    372          
    373            for (int i = 0; i < 8; ++i) {
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
    374              if (data[3] << i & 0x80) {
   \                     ??binHexOct_0:
   \   000012   EC           MOV     A,R4
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   FB           MOV     R3,A
   \   000016   EA           MOV     A,R2
   \   000017   C3           CLR     C
   \   000018   33           RLC     A
   \   000019   FA           MOV     R2,A
   \   00001A   EB           MOV     A,R3
   \   00001B   33           RLC     A
   \   00001C   FB           MOV     R3,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 0,A
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   EC           MOV     A,R4
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?S_SHL
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   5480         ANL     A,#0x80
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   600A         JZ      ??binHexOct_1
    375                result[i] = 1;
   \   00003C   12....       LCALL   ?Subroutine3 & 0xFFFF
    376              } else {
   \                     ??CrossCallReturnLabel_8:
   \   00003F   7401         MOV     A,#0x1
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E4           CLR     A
   \   000044   8006         SJMP    ??binHexOct_2
    377                result[i] = 0;
   \                     ??binHexOct_1:
   \   000046   12....       LCALL   ?Subroutine3 & 0xFFFF
    378              }
    379            }
   \                     ??CrossCallReturnLabel_9:
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \                     ??binHexOct_2:
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   EC           MOV     A,R4
   \   00004E   2401         ADD     A,#0x1
   \   000050   0C           INC     R4
   \   000051   ED           MOV     A,R5
   \   000052   3400         ADDC    A,#0x0
   \   000054   FD           MOV     R5,A
   \   000055   C3           CLR     C
   \   000056   EC           MOV     A,R4
   \   000057   9408         SUBB    A,#0x8
   \   000059   ED           MOV     A,R5
   \   00005A   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005D   40B3         JC      ??binHexOct_0
    380          
    381            for (int i = 0; i < 8; ++i) {
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
    382              if (data[4] << i & 0x80) {
   \                     ??binHexOct_3:
   \   000063   EA           MOV     A,R2
   \   000064   F8           MOV     R0,A
   \   000065   EB           MOV     A,R3
   \   000066   F9           MOV     R1,A
   \   000067   E8           MOV     A,R0
   \   000068   C3           CLR     C
   \   000069   33           RLC     A
   \   00006A   F8           MOV     R0,A
   \   00006B   E9           MOV     A,R1
   \   00006C   33           RLC     A
   \   00006D   F9           MOV     R1,A
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   E582         MOV     A,DPL
   \   000076   28           ADD     A,R0
   \   000077   F8           MOV     R0,A
   \   000078   E583         MOV     A,DPH
   \   00007A   39           ADDC    A,R1
   \   00007B   F9           MOV     R1,A
   \   00007C   E8           MOV     A,R0
   \   00007D   2410         ADD     A,#0x10
   \   00007F   F8           MOV     R0,A
   \   000080   E9           MOV     A,R1
   \   000081   3400         ADDC    A,#0x0
   \   000083   F9           MOV     R1,A
   \   000084   E8           MOV     A,R0
   \   000085   FC           MOV     R4,A
   \   000086   E9           MOV     A,R1
   \   000087   FD           MOV     R5,A
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V0 + 0,A
   \   000093   75..00       MOV     ?V0 + 1,#0x0
   \   000096   EA           MOV     A,R2
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?S_SHL
   \   00009C   E5..         MOV     A,?V0 + 0
   \   00009E   5480         ANL     A,#0x80
   \   0000A0   8C82         MOV     DPL,R4
   \   0000A2   8D83         MOV     DPH,R5
   \   0000A4   6007         JZ      ??binHexOct_4
    383                result[i + 8] = 1;
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E4           CLR     A
   \   0000AB   8003         SJMP    ??binHexOct_5
    384              } else {
    385                result[i + 8] = 0;
   \                     ??binHexOct_4:
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \                     ??binHexOct_5:
   \   0000B0   F0           MOVX    @DPTR,A
    386              }
    387            }
   \   0000B1   EA           MOV     A,R2
   \   0000B2   2401         ADD     A,#0x1
   \   0000B4   0A           INC     R2
   \   0000B5   EB           MOV     A,R3
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   FB           MOV     R3,A
   \   0000B9   C3           CLR     C
   \   0000BA   EA           MOV     A,R2
   \   0000BB   9408         SUBB    A,#0x8
   \   0000BD   EB           MOV     A,R3
   \   0000BE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000C1   40A0         JC      ??binHexOct_3
    388          
    389          
    390            double num = 0;
   \   0000C3   90....       MOV     DPTR,#__Constant_0
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?L_MOV_X
    391          
    392            for (int i = 0; i < 16; ++i) {
   \   0000CB   7E00         MOV     R6,#0x0
   \   0000CD   7F00         MOV     R7,#0x0
    393              if (result[i] == 1) {
   \                     ??binHexOct_6:
   \   0000CF   EE           MOV     A,R6
   \   0000D0   F8           MOV     R0,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   F9           MOV     R1,A
   \   0000D3   E8           MOV     A,R0
   \   0000D4   C3           CLR     C
   \   0000D5   33           RLC     A
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E9           MOV     A,R1
   \   0000D8   33           RLC     A
   \   0000D9   F9           MOV     R1,A
   \   0000DA   85..82       MOV     DPL,?XSP + 0
   \   0000DD   85..83       MOV     DPH,?XSP + 1
   \   0000E0   E582         MOV     A,DPL
   \   0000E2   28           ADD     A,R0
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E583         MOV     A,DPH
   \   0000E7   39           ADDC    A,R1
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   6401         XRL     A,#0x1
   \   0000ED   7002         JNZ     ??binHexOct_7
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \                     ??binHexOct_7:
   \   0000F1   7038         JNZ     ??binHexOct_8
    394                num += pow(2, 15 - i);
   \   0000F3                ; Setup parameters for call to function pow
   \   0000F3   740F         MOV     A,#0xf
   \   0000F5   C3           CLR     C
   \   0000F6   9E           SUBB    A,R6
   \   0000F7   F5..         MOV     ?V0 + 4,A
   \   0000F9   E4           CLR     A
   \   0000FA   9F           SUBB    A,R7
   \   0000FB   F5..         MOV     ?V0 + 5,A
   \   0000FD   33           RLC     A
   \   0000FE   95E0         SUBB    A,0xE0 /* A   */
   \   000100   F5..         MOV     ?V0 + 6,A
   \   000102   F5..         MOV     ?V0 + 7,A
   \   000104   78..         MOV     R0,#?V0 + 4
   \   000106   12....       LCALL   ?L_TO_FLT
   \   000109   78..         MOV     R0,#?V0 + 4
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00010E   90....       MOV     DPTR,#__Constant_40000000
   \   000111   12....       LCALL   ?XLOAD_R2345
   \   000114   12....       LCALL   ??pow?relay
   \   000117   7404         MOV     A,#0x4
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011C   8A..         MOV     ?V0 + 4,R2
   \   00011E   8B..         MOV     ?V0 + 5,R3
   \   000120   8C..         MOV     ?V0 + 6,R4
   \   000122   8D..         MOV     ?V0 + 7,R5
   \   000124   78..         MOV     R0,#?V0 + 0
   \   000126   79..         MOV     R1,#?V0 + 4
   \   000128   12....       LCALL   ?FLT_ADD
    395              }
    396            }
   \                     ??binHexOct_8:
   \   00012B   EE           MOV     A,R6
   \   00012C   2401         ADD     A,#0x1
   \   00012E   0E           INC     R6
   \   00012F   EF           MOV     A,R7
   \   000130   3400         ADDC    A,#0x0
   \   000132   FF           MOV     R7,A
   \   000133   C3           CLR     C
   \   000134   EE           MOV     A,R6
   \   000135   9410         SUBB    A,#0x10
   \   000137   EF           MOV     A,R7
   \   000138   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00013B   4092         JC      ??binHexOct_6
    397              
    398            return (int)num;
   \   00013D   78..         MOV     R0,#?V0 + 0
   \   00013F   12....       LCALL   ?FLT_TO_L
   \   000142   AA..         MOV     R2,?V0 + 0
   \   000144   AB..         MOV     R3,?V0 + 1
   \   000146   7420         MOV     A,#0x20
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014B   7F08         MOV     R7,#0x8
   \   00014D   02....       LJMP    ?BANKED_LEAVE_XDATA
    399          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E582         MOV     A,DPL
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for jump>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Read>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   00           DB 0
   \   000003   12           DB 18
   \   000004   00           DB 0
   \   000005   01           DB 1
   \   000006   24           DB 36
   \   000007   0F           DB 15
   \   000008   01           DB 1
   \   000009   03           DB 3
   \   00000A   00           DB 0
   \   00000B   13           DB 19
   \   00000C   00           DB 0
   \   00000D   01           DB 1
   \   00000E   75           DB 117
   \   00000F   CF           DB 207
   \   000010   01           DB 1
   \   000011   03           DB 3
   \   000012   00           DB 0
   \   000013   15           DB 21
   \   000014   00           DB 0
   \   000015   01           DB 1
   \   000016   95           DB 149
   \   000017   CE           DB 206

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??binHexOct?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    binHexOct

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d:%d,%.1f,%.1f,%d">`:
   \   000000   25643A25     DB "%d:%d,%.1f,%.1f,%d"
   \            642C252E
   \            31662C25
   \            2E31662C
   \            256400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_40000000:
   \   000000   00000040     DD 40000000H
    400          
    401          /*********************************************************************
    402          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    0      0      9
       -> MT_UartInit                   0      0     18
       -> MT_UartRegisterTaskID         0      0     18
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
       -> HalLcdWriteString             0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_start_timerEx            0      0     24
     GenericApp_SendTheMessage          0      0     78
       -> HalUARTWrite                  0      0    104
       -> binHexOct                     0      0    104
       -> osal_strlen                   0      0    114
       -> AF_DataRequest                0      0    122
       -> binHexOct                     0      0    104
       -> binHexOct                     0      0    104
       -> NLME_GetShortAddr             0      0    104
       -> sprintf                       0      0    132
     binHexOct                          0      0    104
       -> pow                           0      0    104


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_NwkState                  1
     GenericApp_TransID                   1
     GenericApp_DstAddr                  12
     ENDID                                2
     index                                2
     task                                 2
     jump                                 1
     Read                                24
     humidity                             2
     temp                                 2
     ec                                   2
     GenericApp_Init                    128
     GenericApp_ProcessEvent            135
     GenericApp_SendTheMessage          409
     ?Subroutine2                        10
     ?Subroutine0                        13
     ?Subroutine4                         8
     ?Subroutine1                         8
     binHexOct                          336
     ?Subroutine3                        11
     ?<Initializer for jump>              1
     ?<Initializer for Read>             24
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ??binHexOct?relay                    6
     ?<Constant "GenericApp">            11
     ?<Constant "%d:%d,%.1f,%.1f,%d">    19
     __Constant_41200000                  4
     __Constant_0                         4
     __Constant_40000000                  4

 
 1 058 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    25 bytes in segment XDATA_I
    25 bytes in segment XDATA_ID
    58 bytes in segment XDATA_ROM_C
    31 bytes in segment XDATA_Z
 
 1 107 bytes of CODE  memory
    46 bytes of CONST memory (+ 12 bytes shared)
    56 bytes of XDATA memory

Errors: none
Warnings: 3
